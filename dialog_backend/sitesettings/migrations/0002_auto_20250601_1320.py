# Generated by Django 5.1.5 on 2025-06-01 10:20

from django.db import migrations


def fill_hero_action_block_data(apps, schema_editor):
    """Заполнение данных модели HeroActionBlock"""
    HeroActionBlock = apps.get_model('sitesettings', 'HeroActionBlock')
    HeroActionBlock.objects.create(
        slogan='Контроль диабета — просто и удобно',
        short_description='Следите за своими показателями, анализируйте данные и держите здоровье под контролем',
        button_text='Начать бесплатно',
        show_on_main_page=True,
    )


def fill_call_action_block(apps, schema_editor):
    """Заполнение данных модели CallToActionBlock"""
    CallToActionBlock = apps.get_model('sitesettings', 'CallToActionBlock')
    CallToActionBlock.objects.create(
        action_text='Начните следить за своим здоровьем уже сегодня!',
        short_description='Присоединяйтесь и получите доступ ко всем возможностям бесплатно',
        button_text='Зарегистрироваться',
        show_on_main_page=True,
    )


def fill_advantage_data(apps, schema_editor):
    """Заполнение данных модели Advantage"""
    Advantage = apps.get_model('cabinet', 'Advantage')

    advantage_titles = [
        'Персонализированный мониторинг здоровья',
        'Удобный анализ тенденций',
        'Ежемесячные отчеты в один клик',
        'Контроль соблюдения режима',
        'Безопасность и конфиденциальность данных',
    ]
    advantage_descriptions = [
        'Приложение адаптируется под индивидуальные параметры пользователя: уровень сахара, ИМТ, '
        'тип лечения, и автоматически подстраивает рекомендации и аналитику под его профиль.',
        'Графики и статистика позволяют отслеживать изменения показателей за любой период — '
        'выявлять закономерности, резкие скачки и оценивать эффективность терапии.',
        'Автоматическая генерация наглядных отчетов помогает делиться прогрессом с '
        'врачом или контролировать динамику без лишних усилий.',
        'Встроенные напоминания и чек-листы помогают не забыть о приёме лекарств, '
        'уколах инсулина и соблюдении диеты — всё под контролем.',
        'Данные пользователя надёжно защищены, а доступ к ним имеют только он '
        'и уполномоченные специалисты — никакой лишней информации в открытом доступе.',
    ]

    advantages = []
    for i in range(5):
        advantages.append(
            Advantage(
                title=advantage_titles[i],
                description=advantage_descriptions[i],
                order_num=i+1,
            )
        )

    Advantage.objects.bulk_create(advantages, batch_size=5)


def fill_rate_data(apps, schema_editor):
    """Заполнение данных модели Rate"""
    Rate = apps.get_model('cabinet', 'Rate')
    rate_texts = [
        '«Раньше записывала всё в блокнот, и постоянно что-то терялось. '
        'С этим приложением всё в одном месте — и графики, и напоминания, и мои показатели. Очень удобно!»',
        '«Наконец-то чувствую, что контролирую болезнь, а не она меня. '
        'Особенно нравится, как приложение показывает, что стало лучше со временем.»',
        '«Показывала врачу свой ежемесячный отчет — он был в восторге. '
        'Сразу видно, как меняется сахар и когда были отклонения. Большая помощь при настройке лечения.»',
        '«Удобный интерфейс, всё понятно даже для таких, '
        'как я — не самых продвинутых пользователей. Напоминания о лекарствах — просто спасение.»',
        '«Спасибо разработчикам! Благодаря приложению я стала внимательнее относиться к себе. '
        'Отслеживаю питание, не пропускаю уколы, и чувствую себя гораздо лучше.»',
    ]

    rates = []
    for i in range(5):
        rates.append(
            Rate(
                text=rate_texts[i],
                is_visible=True,
            )
        )

    Rate.objects.bulk_create(rates, batch_size=5)

class Migration(migrations.Migration):

    dependencies = [
        ('sitesettings', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(fill_hero_action_block_data, migrations.RunPython.noop),
        migrations.RunPython(fill_call_action_block, migrations.RunPython.noop),
        migrations.RunPython(fill_advantage_data, migrations.RunPython.noop),
        migrations.RunPython(fill_rate_data, migrations.RunPython.noop),
    ]
